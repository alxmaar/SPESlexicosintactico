#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QTextStream>
#include <fstream>
#include <iostream>
#include <QFileDialog>
#include <QMessageBox>
#include <QStack>
using namespace std;
static int estado;
int contadorerrores=0;
int contadortokens=0;
QList<QString> tokens;
QList<QString> error;
QList<QString> desToken;
QList<QString> desErrores;
QList<QString> listanumtokens;
static QStack<int> pila;
QString palabrasreservadas[] = {"class",//1003
                                "endclass",//1005
                                "int",//1062
                                "float",//1063
                                "char",//1064
                                "string",//1065
                                "bool",//1066
                                "if",//1028
                                "else",//1031
                                "elseif",//1030
                                "endif",//1029
                                "do",//1021
                                "eval",//1022
                                "enddo",//1023
                                "while",//1036
                                "endwhile",//1037
                                "read",//1034
                                "write",//1035
                                "def",//1006
                                "as",//1007
                                "for",//1024
                                "endfor",//1027
                                "private",//1069
                                "public",//1068
                                "protected",//1070
                                "library",//1000
                                "func",//1012
                                "endfunc",//1013
                                "main",//1008
                                "endmain",//1011
                                "local",//1014
                                "endlocal",//1015
                                "return",//1038
                                "void",//1067
                               "to"};
int numPalabrasReservadas[]={1003,
                             1005,
                             1062,
                             1063,
                             1064,
                             1065,
                             1066,
                             1028,
                             1031,
                             1030,
                             1029,
                             1021,
                             1022,
                             1023,
                             1036,
                             1037,
                             1034,
                             1035,
                             1006,
                             1007,
                             1024,
                             1027,
                             1069,
                             1068,
                             1070,
                             1000,
                             1012,
                             1013,
                             1008,
                             1011,
                             1014,
                             1015,
                             1038,
                             1067,
                             1026};
QString TextoCortado;

int Matriz[28][31]=
{
  { 1,2,506,3,506,506,20,21,22,27,24,0,23,15,124,17,19,0,14,9,10,11,12,13,121,122,119,120,123,0,506},
  {1,2,2,2,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100},
  {2,2,2,2,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101},
  {102,102,102,3,102,102,102,102,102,102,102,102,4,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102},
  {500,500,500,5,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500},
  {103,103,103,5,6,6,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103},
  {501,501,501,8,501,501,7,7,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501},
  {502,502,502,8,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502},
  {104,104,104,8,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104},
  {109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,109,109,109,109,109,109,109,109,109,109,109},
  {111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,111,111,111,111,111,111,111,111,111,111},
  {113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,113,113,113,113,113,113,113,113,113,113,113},
  {116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,115,116,116,116,116,116,116,116,116,116,116,116},
  {503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,117,503,503,503,503,503,503,503},
  {504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,118,504,504,504,504,504,504,504,504,504,504,504,504},
  {16,16,16,16,16,16,16,16,16,16,16,16,16,505,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16},
  {507,507,507,507,507,507,507,507,507,507,507,507,507,125,507,507,507,507,507,507,507,507,507,507,507,507,507,507,507,507,507},
  {17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
  {126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,17,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126},
  {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,127,19,19,19,19,19,19,19,19,19,19,19,19,19},
  {105,105,105,105,105,105,129,105,105,105,105,105,105,105,105,105,105,105,105,135,105,105,105,105,105,105,105,105,105,105,105},
  {106,106,106,106,106,106,106,130,106,106,106,106,106,106,106,106,106,106,106,136,106,106,106,106,106,106,106,106,106,106,106},
  {107,107,107,107,107,107,107,107,131,107,107,107,107,107,107,107,107,107,107,137,107,107,107,107,107,107,107,107,107,107,107},
  {500,500,500,500,500,500,500,500,500,500,500,500,132,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500},
  {108,108,108,108,108,108,108,108,25,108,108,108,108,108,108,108,108,108,108,138,108,108,108,108,108,108,108,108,108,108,108},
  {25,25,25,25,25,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25},
  {26,26,26,26,26,26,26,26,26,26,133,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
  {128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,139,128,128,128,128,128,128,128,128,128,128,128}


};
int MatrizPredictiva[57][72]=
{
    {0,600,600,0,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {1,600,600,2,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,2},
    {600,600,600,3,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,4,600,5,600,600,600,5,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,5},
    {600,600,600,600,600,600,600,600,6,600,600,600,6,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,7,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,9,600,600,600,8,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,9},
    {600,600,600,600,10,600,600,600,600,600,11,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,11},
    {600,600,600,600,13,600,600,600,600,13,600,13,600,13,12,600,600,600,600,13,600,13,600,600,13,600,600,600,13,600,600,600,13,13,13,13,13,600,13,600,600,600,13,13,13,13,600,600,13,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,13},
    {600,600,600,600,14,600,600,600,600,600,600,600,600,600,600,15,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,15},
    {600,600,600,600,16,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,18,600,600,600,600,600,600,600,600,18,17,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,18},
    {600,600,600,600,19,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,21,600,600,600,600,600,600,600,600,20,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,21},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,22,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,23,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,24,600,25,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,25},
    {600,600,600,600,26,600,600,600,600,26,600,26,600,26,600,600,600,600,600,26,600,26,26,600,26,600,600,26,26,26,26,26,26,26,26,26,26,26,26,600,600,600,26,26,26,26,600,600,26,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,27,600,600,600,600,32,600,36,600,36,600,600,600,600,600,32,600,31,36,600,30,600,600,36,28,36,36,36,32,32,34,35,29,36,33,600,600,600,32,32,32,32,600,600,32,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,36},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,37,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,38,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,39,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,41,40,41,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,41},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,43,600,42,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,43},
    {600,600,600,600,46,600,600,600,600,46,600,600,600,600,600,600,600,600,600,46,600,600,600,600,600,600,600,600,600,600,600,600,44,45,600,600,600,600,600,600,600,600,46,46,46,46,600,600,46,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,47,48,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,49,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,50,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,54,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,55,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,56,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,57,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,58,600,600,600,600,600,600,600,59,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,59,59,59,59,59,600,600,600,600,600,600,600,600,600,59},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,60,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,61,600,600,600,600,61,600,600,600,600,600,600,600,600,600,61,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,61,61,61,61,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,65,600,600,600,600,600,600,600,65,600,600,600,600,600,65,600,65,600,600,65,600,600,600,600,65,600,600,600,600,600,65,65,600,600,600,600,600,62,63,64,600,600,600,600,65,65,600,65,65,65,65,65,65,65,65,600,600,600,600,600,600,600,600,600,600,600,600,600,600,65},
    {600,600,600,600,66,600,600,600,600,72,600,600,600,600,600,600,600,600,600,67,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,68,69,70,71,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,73,600,600,600,600,73,600,600,600,600,600,600,600,600,600,73,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,73,73,73,73,600,600,73,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,75,600,600,600,600,600,600,600,75,600,600,600,600,600,75,600,75,600,600,75,600,600,600,600,75,600,600,600,600,600,75,75,600,600,600,600,600,600,600,600,600,600,600,600,74,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,75},
    {600,600,600,600,76,600,600,600,600,76,600,600,600,600,600,600,600,600,600,76,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,76,76,76,76,600,600,76,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,78,600,600,600,600,600,77,600,78,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,78},
    {600,600,600,600,79,600,600,600,600,79,600,600,600,600,600,600,600,600,600,79,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,79,79,79,79,600,600,79,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,81,600,600,600,600,600,600,600,81,600,600,600,600,600,81,600,81,600,600,81,600,600,600,600,81,600,600,600,600,600,81,81,600,600,600,600,600,600,600,600,600,600,600,600,81,80,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,81},
    {600,600,600,600,83,600,600,600,600,83,600,600,600,600,600,600,600,600,600,83,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,83,83,83,83,600,600,82,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,84,600,600,600,600,84,600,600,600,600,600,600,600,600,600,84,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,84,84,84,84,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,86,600,600,600,600,600,600,600,86,600,600,600,600,600,86,600,86,600,600,86,600,600,600,600,86,600,600,600,600,600,86,86,600,600,600,600,600,600,600,600,600,600,600,600,86,86,600,600,600,85,85,85,85,85,85,600,600,600,600,600,600,600,600,600,600,600,600,600,600,86},
    {600,600,600,600,87,600,600,600,600,87,600,600,600,600,600,600,600,600,600,87,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,87,87,87,87,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,90,600,600,600,600,600,600,600,90,600,600,600,600,600,90,600,90,600,600,90,600,600,600,600,90,600,600,600,600,600,90,90,600,600,600,600,600,600,600,600,600,600,600,600,90,90,600,88,89,90,90,90,90,90,90,600,600,600,600,600,600,600,600,600,600,600,600,600,600,90},
    {600,600,92,600,600,600,600,600,600,91,92,600,600,600,600,600,92,600,92,600,600,92,600,600,600,600,92,600,600,600,600,600,92,92,600,600,600,600,600,92,92,92,600,600,600,600,92,92,600,92,92,92,92,92,92,92,92,600,600,600,600,600,600,600,600,600,600,600,600,600,600,92},
    {600,600,600,600,93,600,600,600,600,600,94,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,94},
    {600,600,600,600,600,600,600,600,600,600,95,600,600,600,600,600,96,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,95},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,97,98,99,100,101,102,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,103,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,104,105,106,107,108,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,109,110,111,112,113,114,600,600,600,600},
    {600,600,600,600,118,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,115,116,117,118},
    {600,600,600,600,51,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600},
    {600,600,600,600,600,600,600,600,600,600,52,600,600,600,600,600,53,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,52}

};
int static producciones[119][12]
{
    {2,1},//1
        {1,123,101,1000},//2
        {-1},//3
        {1005,4,3,123,101,1003},//4
        {3,123,53,1007,12,54,1006},//5
        {-1},//6
        {5,6},//7
        {1011,17,8,120,7,119,1008},//8
        {6,1013,17,8,120,7,119,53,1007,101,1012},//9
            {-1},//10
            {7,123,53,1007,12},//11
        {-1},//12
        {1015,9,1014},//13
        {-1},//14
    {9,123,53,1007,12},//15
        {-1},//16
            {11,101},//17
        {14},
        {-1},
            {13,10},
            {13,10,124},
            {-1},
            {122,15,121},

            {16,1013,132,102},

            {16,102,132,102,124},

            {-1},

            {18},


            {18,123,26},

            {18,123,21},
            {18,123,29},
            {18,123,20},
            {18, 123 ,19},

            {18 ,123 ,24},

            {18 ,123 ,30},

            {18 ,123 ,27},

            {18 ,123 ,28},

            {-1},


            {1023,120,37,119,1022,17,1021},
            {1027,17,1021,37,1026,37,109,101,1024},

            {1029,22,17,120,37,119,1028},
            {23,22,17,120,37,119,1030},
            {-1},

            {17,1031},

            {-1},

            {37,129},

            {37,130},

            {25,37},

            {129},

            {130},

            {37,52,31},

            {120,55,119,1034},

            {56,101},

            {-1},

            {56,101,124},

            {120,39,119,1035},

            {1037,17,120,37,119,1036},

            {37,1038},

            {32,101},

            {33},

            {-1},

            {122,39,121},

            {35,36},

            {35,36,107,},

            {35,36,108},

            {35,36,128},

            {-1},

            {48,101},

            {102},

            {103},

            {104},

            {125},

            {126},


            {120,37,119},

            {38,41},

            {38,41,118},

            {-1},

            {40,37},

            {40,37,124},

            {-1},

            {42,43},

            {42,43,117},

            {-1},

            {44,116},

            {44},

            {45,46},

            {46,51},

            {-1},

            {47,34},

            {47,34,105},

            {47,34,106},

            {-1},

            {120,49,119},

            {-1},

            {50,101},

            {-1},

            {-1},

            {50,101,124},

            {110},

            {115},

            {111},

            {112},

            {113},

            {114},

            {109},

            {135},

            {136},

            {137},

            {138},


            {139},

            {1062},

            {1063},

            {1064},

            {1065},

            {1066},

            {1067},

            {1068},

            {1069},

            {1070},

            {-1},




};
int relcaracter(char c)
{

    if(c>=97 && c<=122)
        return 0;
    if(c>=65 && c<=90)
        return 1;
    if(c>=48 && c<=57)
        return 3;
    switch(c)
    {
          case 'e': return 5;
        break;
          case 'E':return 4;
        break;

           case '+' :return 6;
        break;

          case '-': return 7;
        break;

          case '*': return 8;
        break;

          case '%': return 9;
        break;

          case '/': return 10;
        break;

          case '_': return 2;
        break;

          case '&': return 23;
        break;

          case '|': return 18;
        break;

          case '!': return 22;
        break;

          case '=': return 19;
        break;
    case '.':return 12;

          case '<': return 20;break;
          case '>' : return 21;break;
          case '[' : return 24;break;
          case ']': return 25;break;
          case '(': return 26;break;
          case ')': return 27;break;
          case ':': return 24;break;
          case ';' : return 28;break;
          case 34 : return 15;break;
          case '\n' : return 17;break;
          case '\t': return 11;break;
      case '#' : return 16;break;
      case 39 : return 13;break;
      case ',': return 14;break;
    case 32:return 29;break;

    default: return 30;
    }

}

void checartokens(int e)
{  QString temp = QString::number(contadortokens);
    tokens << TextoCortado.trimmed();
    switch(e)
    {
    tokens<<TextoCortado.trimmed();
    case 100:
        listanumtokens<<QString::number(e);
        desToken<<"Palabras reservadas";
        TextoCortado.trimmed();
        contadortokens++;
        break;
    case 101:
        listanumtokens<<QString::number(e);

        desToken<<"Identificador";
        contadortokens++;
        TextoCortado.trimmed();

    break;
    case 102:
        listanumtokens<<QString::number(e);

        desToken<<"enteros";
        contadortokens++;
        TextoCortado.trimmed();

    break;
    case 103:
        listanumtokens<<QString::number(e);

        desToken<<"reales";
        contadortokens++;
        TextoCortado.trimmed();

    break;
    case 104:
        listanumtokens<<QString::number(e);

        desToken<<"Notacion Cientifica";
        contadortokens++;
        TextoCortado.trimmed();

    break;
    case 105:
        listanumtokens<<QString::number(e);

        desToken<<"suma";
        contadortokens++;
        TextoCortado.trimmed();

        break;

    case 106:
        listanumtokens<<QString::number(e);

        desToken<<"resta";
        contadortokens++;
        TextoCortado.trimmed();

        break;
    case 107:
        listanumtokens<<QString::number(e);

        desToken<<"multiplcacion";
        contadortokens++;
        TextoCortado.trimmed();

        break;
    case 108:
        listanumtokens<<QString::number(e);

        desToken<<"division";
        contadortokens++;

        TextoCortado.trimmed();
        break;
    case 109:
        listanumtokens<<QString::number(e);

        desToken<<"asignar";
        TextoCortado.trimmed();

        contadortokens++;break;

    case 110:
        listanumtokens<<QString::number(e);

        desToken<<"igual";
        TextoCortado.trimmed();

        contadortokens++;break;

    case 111:
        listanumtokens<<QString::number(e);

        desToken<<"menor";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 112:
        listanumtokens<<QString::number(e);

        desToken<<"menor igual";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 113:
        listanumtokens<<QString::number(e);

        desToken<<"mayor";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 114:
        listanumtokens<<QString::number(e);

        desToken<<"mayor igual";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 115:
        listanumtokens<<QString::number(e);

        desToken<<"diferente";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 116:
        listanumtokens<<QString::number(e);

        desToken<<"not";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 117:
        listanumtokens<<QString::number(e);

        desToken<<"and";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 118:
        listanumtokens<<QString::number(e);

        desToken<<"or";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 119:
        listanumtokens<<QString::number(e);

        desToken<<"Parentesis que abre";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 120:
        listanumtokens<<QString::number(e);

        desToken<<"Parentesis que cierra";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 121:
        listanumtokens<<QString::number(e);

        desToken<<"Corchete que abre";
        TextoCortado.trimmed();

        contadortokens++;break;
    case 122:
        listanumtokens<<QString::number(e);

        desToken<<"Corchete que cierra";
        TextoCortado.trimmed();

    contadortokens++;break;
    case 123:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();

        desToken<<"Punto y coma";
    contadortokens++;break;
    case 124:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();

        desToken<<"coma";
    contadortokens++;break;
    case 125:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();

        desToken<<"Caracter";
    contadortokens++;break;
    case 126:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();

        desToken<<"String";
        contadortokens++;break;

    case 127:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();

        desToken<<"Comentario de linea";
        contadortokens++;break;

    case 128:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();

        desToken<<"modulo";
        contadortokens++;break;
    case 129:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"Incremento";
        contadortokens++;break;

    case 130:

        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"Decremento";
        contadortokens++;break;
    case 131:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"Potenciar";
        contadortokens++;break;

    case 132:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"DOBLE PUNTUACION";
        contadortokens++;break;
    case 133:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"COMENTARIO DE BLOQUE";
        contadortokens++;break;
    case 134:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"AGRUPACION";
        contadortokens++;break;

    case 135:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"ASIGNAR MAS";
        contadortokens++;break;

case 136:
        listanumtokens<<QString::number(e);

    TextoCortado.trimmed();
    desToken<<"ASIGNAR MENOS";
    contadortokens++;break;

    case 137:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"ASIGNAR PRODUCTO";
        contadortokens++;break;

    case 138:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"ASIGNAR DIVISION";
        contadortokens++;break;

    case 139:
        listanumtokens<<QString::number(e);

        TextoCortado.trimmed();
        desToken<<"ASIGNAR MODULO";
        contadortokens++;break;

    case 1000:
           desToken << "Palabra Reservada library";
           listanumtokens<<QString::number(e);

           contadortokens++;
           break;
    case 1003:
           desToken << "Palabra Reservada class";
           listanumtokens<<QString::number(e);

           contadortokens++;
           break;
    case 1005:
           desToken << "Palabra Reservada endclass";

           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1006:
           desToken << "Palabra Reservada def";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1007:
           desToken << "Palabra Reservada as";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1008:
           desToken << "Palabra Reservada main";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1011:
           desToken << "Palabra Reservada endmain";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1012:
           desToken << "Palabra Reservada func";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1013:
           desToken << "Palabra Reservada endfunc";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1014:
           desToken << "Palabra Reservada local";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1015:
           desToken << "Palabra Reservada endlocal";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1021:
           desToken << "Palabra Reservada do";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1022:
           desToken << "Palabra Reservada eval";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1023:
           desToken << "Palabra Reservada enddo";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1024:
           desToken << "Palabra Reservada for";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1026:
           desToken << "Palabra Reservada to";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1027:
           desToken << "Palabra Reservada endfor";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1028:
           desToken << "Palabra Reservada if";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1029:
           desToken << "Palabra Reservada endif";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1030:
           desToken << "Palabra Reservada elseif";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1031:
           desToken << "Palabra Reservada else";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1034:
           desToken << "Palabra Reservada read";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1035:
           desToken << "Palabra Reservada write";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1036:
           desToken << "Palabra Reservada while";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1037:
           desToken << "Palabra Reservada endwhile";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1038:
           desToken << "Palabra Reservada return";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1062:
           desToken << "Palabra Reservada int";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1063:
           desToken << "Palabra Reservada float";
           contadortokens++;
           break;
    case 1064:
           desToken << "Palabra Reservada char";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1065:
           desToken << "Palabra Reservada string";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1066:
           desToken << "Palabra Reservada bool";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1067:
           desToken << "Palabra Reservada void";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1068:
           desToken << "Palabra Reservada public";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1069:
           desToken << "Palabra Reservada private";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;
    case 1070:
           desToken << "Palabra Reservada protected";
           listanumtokens<<QString::number(e);
           contadortokens++;
           break;



    }

}
QString err;

void errores(int e)
{
    QMessageBox errorbx;

    switch(e)
    {
    case 500:
        desErrores<<"ERROR 500: INGRESAR DIGITO DESPUES DEL PUNTO";
        error<<TextoCortado.trimmed();
        contadorerrores++; break;
    case 501:
        desErrores<<"ERROR 501: INGRESAR DIGITO DESPUES DE EXPONENCIAL";
        error<<TextoCortado.trimmed();

        contadorerrores++; break;
    case 502:
        desErrores<<"ERROR 502: INGRESAR DIGITO DESPUES DE LA SUMA O RESTA";

        error<<TextoCortado.trimmed();
        contadorerrores++; break;
    case 503:
        desErrores<<"ERROR 503: NO CONCUERDAN LOS CARACTERES ";
        error<<TextoCortado.trimmed();

        contadorerrores++; break;
    case 504:
        desErrores<<"ERROR 504: FALTA UN CARACTER | PARA EL OR";

        error<<TextoCortado.trimmed();
        contadorerrores++; break;
    case 505:
        desErrores<<"ERROR 505: FALTA CARACTER ";

        error<<TextoCortado.trimmed();
        contadorerrores++; break;
    case 506:
        desErrores<<"ERROR 506: FALTA SIMBOLO";

        error<<TextoCortado.trimmed();
        contadorerrores++; break;
    case 507:
        desErrores<<"ERROR 507: CARACTER VACIO";

        error<<TextoCortado.trimmed();
        contadorerrores++; break;

    case 600:
        desErrores<<"ERROR, VERIFICA TU SINTAXIS";

        error<<TextoCortado.trimmed();
        contadorerrores++; break;
        errorbx.setText("ERROR, VERIFICA TU SINTAXIS");
        errorbx.exec();

    }
}

int AnalizarPalabraReservada(){
    int contador = 0;

    std::string cadena = TextoCortado.toStdString();
    for(int i = 0; i < TextoCortado.length(); i++){
        char car = cadena[i];
        if(car == '\n' || car == '\t' || car == 32)
            contador++;
    }
    QString stringtemp = TextoCortado.mid(contador, TextoCortado.length());
    for(int i=0;i<=34;i++)
    {
    if(stringtemp==palabrasreservadas[i])
    {
        return numPalabrasReservadas[i];
        break;
    }
    }
    return 101;
}
QString texto;
int ANALIZAR(QString cadena){
    std::string cadenadiv = cadena.toStdString();
    estado = 0;
    TextoCortado="";
    int columna;
    char caracter=cadenadiv[0];
    int num = 1;

    while(estado <= 31){
        columna = relcaracter(caracter);
        estado = Matriz[estado][columna];


        if(estado==119)
            TextoCortado.append('(');
        if(estado==120)
            TextoCortado.append(')');
        if(estado==121)
            TextoCortado.append('[');
        if(estado==122)
            TextoCortado.append(']');
        if(estado==117)
        TextoCortado.append("&");
        if(estado==118)
        TextoCortado.append("|");
        if(estado==123)
            TextoCortado.append(';');
        if(estado==124)
            TextoCortado.append(",");
        if(estado==128)
            TextoCortado.append('%');



        if(estado < 100 || estado >= 500)
            TextoCortado.append(caracter);

        if(estado == 103 && (caracter == 'e' || caracter == 'E')){
            if(caracter == 'e')
                TextoCortado.append('e');
            if(caracter == 'E')
                TextoCortado.append('E');
            estado = 6;
        }


        if(estado==114 && caracter=='='){
            TextoCortado.append('=');
            estado=114;
        }
        if(estado==135 && caracter=='='){
            TextoCortado.append('=');
            estado=135;
        }
        if(estado==136 && caracter=='='){
            TextoCortado.append('=');
            estado=136;
        }
        if(estado==137 && caracter=='='){
            TextoCortado.append('=');
            estado=137;
        }
        if(estado==138 && caracter=='='){
            TextoCortado.append('=');
            estado=138;
        }
        if(estado==139 && caracter=='='){
            TextoCortado.append('=');
            estado=139;
        }

        if(estado==113 && caracter=='='){
            TextoCortado.append('=');
            estado=113;
        }
        if(estado==111 && caracter=='='){
            TextoCortado.append('=');
            estado=11;
        }


        if(estado==112 && caracter=='='){
            TextoCortado.append('=');
            estado=112;
        }

        if(estado==115 && caracter=='='){
            TextoCortado.append('=');
            estado=115;
        }

        if(estado==109 && caracter=='='){
            TextoCortado.append('=');
            estado=109;
        }
        if(estado==110 && caracter=='='){
            TextoCortado.append('=');
            estado=110;
        }
        if(estado==105 && caracter=='+'){
            TextoCortado.append('+');
            estado=105;
        }
        if(estado==129 && caracter=='+'){
            TextoCortado.append('+');
            estado=129;
        }
        if(estado==106 && caracter=='-'){
            TextoCortado.append('-');
            estado=106;
        }
        if(estado==130 && caracter=='-'){
            TextoCortado.append('-');
            estado=130;
        }
        if(estado==107 && caracter=='*'){
            TextoCortado.append('*');
            estado=107;
        }
        if(estado==131 && caracter=='*'){
            TextoCortado.append('*');
            estado=131;
        }
        if(estado==132 && caracter=='.'){
            TextoCortado.append('.');
            estado=132;
        }


        if(estado==127 && caracter=='#'){
            TextoCortado.append('#');
            estado=127;
        }

        if(estado==15 && caracter!=39){
            TextoCortado.append(caracter);
            estado=15;
        }else if(estado==15 && caracter!=39){
            TextoCortado.append(caracter);
            estado=125;
        }

        if(estado==125 && caracter==39){
            TextoCortado.append(caracter);
            estado=125;
        }

        if(estado==100)
            estado=AnalizarPalabraReservada();

        if(estado==106 && caracter=='"'){
            TextoCortado.append(caracter);
            estado=106;
        }
        if(estado==133 && caracter=='/'){
            TextoCortado.append(caracter);
            estado=133;
        }
        if(estado==108 && caracter=='/'){
            TextoCortado.append(caracter);
            estado=108;
        }
        if(estado==134 && caracter==')'){
                    TextoCortado.append(caracter);
                    estado=134;
                }
        if(estado==134 && caracter==']'){
                    TextoCortado.append(caracter);
                    estado=134;
                }
        caracter=cadenadiv[num];
        num++;
    }
        if(TextoCortado=="&&" || TextoCortado.contains("&&")){
            estado = 117;
        }else if (TextoCortado.contains("&")) {
            estado = 503;
        }

        if(TextoCortado=="||" || TextoCortado.contains("||")){
            estado = 118;
        }else if (TextoCortado.contains("|")) {
            estado = 504;
        }
        int contador=0;
        std::string cadenadiv2 = TextoCortado.toStdString();
        for(int i=0;i<TextoCortado.length();i++){

            char caracter2=cadenadiv[i];
          if((caracter2==' ' || caracter2=='\t' || caracter2==32 )&&((cadenadiv2[0]!=34) && (cadenadiv2[cadenadiv.length()]!=34))&&((cadenadiv2[2]!='/') && (cadenadiv2[TextoCortado.length()]!='/')))
              contador++;
        }

        int longitud=TextoCortado.length();

        texto=texto.remove(0,longitud);

        if(contador!=0){

         TextoCortado.remove(0,contador);

            }


        if((estado>=100 && estado<=199)||(estado>=1000&&estado<=1100)){
            checartokens(estado);
        }else{
            errores(estado);
        }
        if(TextoCortado=="^"){
               estado = 94;
           }
    return estado;
}
int relacionaGramatica(int estado){


    switch(estado){



    case 100: break;
    case 1000: return 0;
    case 101:return 4;
        case 123: return 2;
        case 1003: return 3;
        case 1005: return 5;
        case 1006: return 6;
        case 1007: return 7;
        case 1008: return 8;
        case 119: return 9;
        case 120: return 10;
        case 1011: return 11;
        case 1012: return 12;
        case 1013: return 13;
        case 1014: return 14;
        case 1015: return 15;
        case 124: return 16;
        case 121: return 17;
        case 122: return 18;
        case 102: return 19;
        case 132: return 20;
        case 1021: return 21;
        case 1022: return 22;
        case 1023: return 23;
        case 1024: return 24;
        case 109: return 25;
        case 1026: return 26;
        case 1027: return 27;
        case 1028: return 28;
        case 1029: return 29;
        case 1030: return 30;
        case 1031: return 31;
        case 129: return 32;
        case 130: return 33;
        case 1034: return 34;
        case 1035: return 35;
        case 1036: return 36;
        case 1037: return 37;
        case 1038: return 38;
        case 107: return 39;
        case 108: return 40;
    case 128 : return 41;
    case 103 : return 42;
    case 104 : return 43;
    case 125 : return 44;
    case 126 : return 45;
    case 118 : return 46;
    case 117 : return 47;
    case 116 : return 48;
    case 105 : return 49;
    case 106 : return 50;
    case 110 : return 51;
    case 115 : return 51;
    case 111:return 53;
    case 112 : return 54;
    case 113 : return 55;
    case 114 : return 56;
    case 135 : return 57;
    case 136 : return 58;
    case 137 : return 59;
    case 138 : return 60;
    case 139 : return 61;
    case 1062 : return 62;
    case 1063 : return 63;
    case 1064 : return 64;
    case 1065 : return 65;
    case 1066 : return 66;
    case 1067 : return 67;
    case 1068 : return 68;
    case 1069 : return 69;
    case 1070 : return 70;

    default: return 71;
    }
}
QString evaluaElemento(int token){
    switch(token){
    case -1:
        return "ε";
        break;
    case 0:
        return "PROGRAMA";
        break;
    case 1:
        return "DECLARA_LIBRARY";
        break;
    case 2:
        return "DECLARA_CLASS";
        break;
    case 3:
        return "DECLARA";
        break;
    case 4:
        return "METODOS";
        break;
    case 5:
        return "DECLARA_MAIN";
        break;
    case 6:
        return "DECLARA_FUNCTION";
        break;
    case 7:
        return "PARAMETROS";
        break;
    case 8:
        return "DEC_LOCALVAR";
        break;
    case 9:
        return "DEC_LOCALVAR_2";
        break;
    case 10:
        return "ID_DIM ";
        break;
    case 11:
        return "ID_DIM_2";
        break;
    case 12:
        return "ID_DIM_3";
        break;
    case 13:
        return "ID_DIM_4";
        break;
    case 14:
        return "DIM";
        break;
    case 15:
        return "CONST";
        break;
    case 16:
        return "CONST_2";
        break;
    case 17:
        return "ESTATUTOS";
        break;
    case 18:
        return "ESTATUTOS_2";
        break;
    case 19:
        return "EST_DO";
        break;
    case 20:
        return "EST_FOR";
        break;
    case 21:
        return "EST_IF";
        break;
    case 22:
        return "EST_IF2";
        break;
    case 23:
        return "EST_IF3";
        break;
    case 24:
        return "EST_UNIT";
        break;
    case 25:
        return "EST_UNIT_2";
        break;
    case 26:
        return "EST_ASIG";
        break;
    case 27:
        return "EST_READ";
        break;
    case 28:
        return "EST_WRITE";
        break;
    case 29:
        return "EST_WHILE";
        break;
    case 30:
        return "EST_RETURN";
        break;
    case 31:
        return "ASIG";
        break;
    case 32:
        return "ASIG_2";
        break;
    case 33:
        return "DIM_ASIG";
        break;
    case 34:
        return "TERM";
        break;
    case 35:
        return "TERM_2";
        break;
    case 36:
        return "FACT";
        break;
    case 37:
        return "EXPR";
        break;
    case 38:
        return "EXPR_2";
        break;
    case 39:
        return "EXPR_3";
        break;
    case 40:
        return "EXPR_4";
        break;
    case 41:
        return "EXPR2";
        break;
    case 42:
        return "EXPR2_2";
        break;
    case 43:
        return "EXPR3";
        break;
    case 44:
        return "EXPR4";
        break;
    case 45:
        return "EXPR4_2";
        break;
    case 46:
        return "EXPR5";
        break;
    case 47:
        return "EXPR5_2";
        break;
    case 48:
        return "LLAMADA_F";
        break;
    case 49:
        return "ID_2";
        break;
    case 50:
        return "ID_3";
        break;
    case 51:
        return "OPREL";
        break;
    case 52:
        return "OPASIG";
        break;
    case 53:
        return "ACCESO_VAR";
        break;
    case 54:
        return "ID";
        break;
    case 55:
        return "ID2";
        break;
    case 56:
        return "$";

        break;
    case 94:return "$";
    case 1000:return "library";
    case 1001:return "Nombre_libreria";
    case 123: return " ;"  ;
            case 1003: return "class "  ;
            case 101: return "id"  ;
            case 1005: return "endclass"  ;
            case 1006: return "def"  ;
            case 1007: return "as"  ;
            case 1008: return "main"  ;
            case 119: return " ("  ;
            case 120: return " )"  ;
            case 1011: return "endmain "  ;
            case 1012: return "func "  ;
            case 1013: return " endfunc"  ;
            case 1014: return " local"  ;
            case 1015: return "endlocal "  ;
            case 124: return ","  ;
            case 121: return "["  ;
            case 122: return "]"  ;
            case 102: return "cteentera"  ;
            case 132: return ".."  ;
            case 1021: return "do "  ;
            case 1022: return "eval"  ;
            case 1023: return "enddo"  ;
            case 1024: return "for "  ;
            case 109: return "="  ;
            case 1026: return "to"  ;
            case 1027: return "endfor "  ;
            case 1028: return "if"  ;
            case 1029: return "endif"  ;
            case 1030: return "elseif"  ;
            case 1031: return "else"  ;
            case 129: return "++"  ;
            case 130: return "--"  ;
            case 1034: return "read"  ;
            case 1035: return "write"  ;
            case 1036: return "while"  ;
            case 1037: return "endwhile"  ;
            case 1038: return "return"  ;
            case 107: return "*"  ;
            case 108: return "/"  ;
          case 128 : return "%"  ;
        case 103 : return "ctereal"  ;
        case 104 : return "ctenotacion"  ;
        case 125 : return "ctecaracter"  ;
        case 126 : return "ctestring"  ;
        case 118 : return "||"  ;
        case 117 : return "&&"  ;
        case 116 : return "!"  ;
        case 105 : return "+"  ;
        case 106 : return "-"  ;
        case 110 : return "=="  ;
        case 115 : return "!="  ;
        case 111 : return "<"  ;
        case 112 : return "<="  ;
        case 113 : return ">"  ;
        case 114 : return ">="  ;
        case  135: return "+="  ;
        case 136 : return "-="  ;
        case 137 : return "*="  ;
        case 138 : return "/="  ;
        case 139 : return "%="  ;
        case 1062 : return "int"  ;
        case 1063 : return "float"  ;
        case 1064 : return "char"  ;
        case 1065 : return "string"  ;
        case 1066 : return "bool"  ;
        case 1067 : return "void"  ;
        case 1068 : return "public"  ;
        case 1069 : return "private"  ;
        case 1070 : return "protected"  ;

    default: return "Desconocido";
    }

}
void llenarPilaProduccion(int fila){
    for(int i = 0; i < 12; i++){
        if(producciones[fila][i] != 0){
            pila.push(producciones[fila][i]);
        }
    }
}
QString desPila;
void imprimePila(){
    for(int i = 0; i < pila.size(); i++){
        QString ele = evaluaElemento(pila.at(i));
         desPila += ele + " ";
    }
    desPila += "\n";
}

void Gramatica(){
    int token = 0, estadosin = 0, colsin = 0, filasin = 0;
    bool xd=false;
    while(!pila.empty()){
        pila.pop();
    }
    pila.push('^');
    pila.push(0);
    bool tokenValido = true, pilallena = true;
    imprimePila();
    while(estadosin < 500 && (token < 500||token>=1000) && !pila.empty()){
       if(token==133)
       {
       token=ANALIZAR(texto);
       xd=true;
       }
       xd=false;
        if((tokenValido)&&(texto!="^")){
            if(!xd){
            token = ANALIZAR(texto);
}

            tokenValido = false;
            if(TextoCortado=="^")
                goto final;
        }

        if(pilallena){
            colsin = relacionaGramatica(token);
            filasin = pila.top();

            pila.pop();
            estadosin = MatrizPredictiva[filasin][colsin];

           if(estadosin==600){
                errores(estadosin);
                contadortokens--;
                break;
            }
            llenarPilaProduccion(estadosin);
            pilallena = false;

            imprimePila();
        }
        if(pila.top() >= 100){
            if(pila.top() == token){
                pila.pop();
                if(texto!=""){
                    tokenValido = true;
                }
                imprimePila();
            }else{

                QString tr = evaluaElemento(token);
                QString tp = evaluaElemento(pila.top());
                QMessageBox msgBox;
                               msgBox.setText("Hay errores en la sintaxis");
                               msgBox.setText("Hay errores en la sintaxis porque se esperaba un "+tp+" y se recibio un "+tr);
                msgBox.exec();
                break;
            }
        }else{
            if(estadosin>500){
                errores(estadosin);
            }else{
                if(pila.top() > 0 && pila.top() <= 72&&estado!=133){

                    pilallena = true;
                }
                if(pila.top() == -1){

                    pila.pop();
                    imprimePila();

                }
                final:
                if(pila.top() == '^'){
                    pila.pop();
                    imprimePila();

                    desPila+="end of file";
                    QMessageBox msgBox;
                    msgBox.setText("No hay errores");
                    msgBox.exec();
                    break;
                }
            }
        }
        }
    }

void MainWindow::on_analizarbtn_clicked()
{
        tokens.clear();
        desToken.clear();
      contadortokens = 0;
      contadorerrores = 0;
      texto=ui->codetxt->toPlainText();
      texto.append("^");
      Gramatica();
      if(err != "")
              QMessageBox::about(this, "Sintaxis", "Se encontraron algunos errores lexicos o sintacticos");

      ui->tablatoken->setColumnCount(3);
      QStringList t;
      t << "Token" << "Numero del token"<<"Descripcion del token";
      ui->tablatoken->setHorizontalHeaderLabels(t);
      ui->tablatoken->setColumnWidth(0, 100);
      ui->tablatoken->setColumnWidth(1, 100);
      ui->tablatoken->setColumnWidth(2,200);
      for(int i = 0; i < contadortokens; i++){
          ui->tablatoken->insertRow(ui->tablatoken->rowCount());
          ui->tablatoken->setItem(ui->tablatoken->rowCount()-1, 0, new QTableWidgetItem(tokens[i]));
          ui->tablatoken->setItem(ui->tablatoken->rowCount()-1, 1, new QTableWidgetItem(listanumtokens[i]));
          ui->tablatoken->setItem(ui->tablatoken->rowCount()-1, 2, new QTableWidgetItem(desToken[i]));

      }
      ui->tablaerrores->setColumnCount(2);
      QStringList e;
      e << "Error" << "Descripcion de  Error";
      ui->tablaerrores->setHorizontalHeaderLabels(e);
      ui->tablaerrores->setColumnWidth(0, 100);
      ui->tablaerrores->setColumnWidth(1, 420);
      for(int i = 0; i < contadorerrores; i++){
          ui->tablaerrores->insertRow(ui->tablaerrores->rowCount());
          ui->tablaerrores->setItem(ui->tablaerrores->rowCount()-1, 0, new QTableWidgetItem(error[i]));
          ui->tablaerrores->setItem(ui->tablaerrores->rowCount()-1, 1, new QTableWidgetItem(desErrores[i]));
      }
      ui->txtPila->appendPlainText(desPila);

}
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_abrirbtn_clicked()
{

    QString ruta=QFileDialog::getOpenFileName(
                    this,tr("Abrir"),"C:\\Users\\alex_\\Documents\\analizadorlexico","SPES Files (*.spes)");
        if(ruta!=""){
            QFile inputFile(ruta);
            if (inputFile.open(QIODevice::ReadOnly)){
                QTextStream in(&inputFile);
                while (!in.atEnd()){
                    QString line = in.readLine();
                    ui->codetxt->appendPlainText(line);
                }
                inputFile.close();
            }
        }
}
void MainWindow::on_guardarbtn_clicked()
{
    QString archivo = QFileDialog::getSaveFileName(this,
                tr("Guardar como..."), "",
                tr("SPES Files (*.spes)"));
        if (archivo.isEmpty())
                return;
            else {
                QFile file(archivo);
                if (!file.open(QIODevice::WriteOnly)) {
                    QMessageBox::information(this, tr("Imposible realizar la operación"),
                        file.errorString());
                    return;
                }
        }
        QFile file(archivo);
        if ( file.open(QIODevice::ReadWrite) ){
            QTextStream stream( &file );
            stream <<ui->codetxt->toPlainText();
        }

    }
void MainWindow::on_salirbtn_clicked()
{
    close();
}



